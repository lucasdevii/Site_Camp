datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  details  String?
  code     String     @unique @default(uuid())
  isOnline Boolean    @default(false)


  sentFriendRequests     FriendsStatus[] @relation("SentRequests")
  receivedFriendRequests FriendsStatus[] @relation("ReceivedRequests")
}

model FriendsStatus {
  id           Int    @id @default(autoincrement())
  requesterId  String
  receiverId   String
  requester    User   @relation("SentRequests", fields: [requesterId], references: [code])
  receiver     User   @relation("ReceivedRequests", fields: [receiverId], references: [code])
  status       FriendshipStatus @default(PENDING)
  createdAt    DateTime         @default(now())

  @@unique([requesterId, receiverId])
}

model ChatInfos {
  id           String           @id @default(uuid()) // ID do chat agora Ã© UUID
  participants ChatParticipants[]
  messages     ChatTalks[]
}

model ChatParticipants {
  id         Int       @id @default(autoincrement())
  chatRoomId String
  chatRoom   ChatInfos @relation(fields: [chatRoomId], references: [id])
  userId     String    // referencia User.code
  name       String
}

model ChatTalks {
  id           Int       @id @default(autoincrement())
  conversation String
  authorId     String    // referencia User.code
  chatRoomId   String    // referencia ChatInfos.id
  chatRoom     ChatInfos @relation(fields: [chatRoomId], references: [id])
  createdAt    DateTime  @default(now())
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}
